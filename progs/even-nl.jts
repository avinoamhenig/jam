-- odd/even using nested lets:
-- let even = ( let _even = \x -> if x < 2 then x = 0 else _odd  (x - 1)
--                  _odd  = \y -> if y < 2 then x = 1 else _even (y - 1)
--              in (\_ -> _even) () )
-- in even 7

-- create root exp first so that we don't overwrite root bindings later
rpl :root App(:rf :ra)

-- $even
bnd :root $even :even

-- $_even
rpl :even App(:f :a)
rpl :a Unit()
rpl :f Lambda($_ :even_ref)
bnd :even $_even :_even
bnd :even $_odd  :_odd
rpl :even_ref IdExp($_even)

-- _even
rpl :_even Lambda($x :body)
rpl :body If(:c :t :e)

rpl :c App(:f :a2)
rpl :f App(:f :a1)
rpl :f IdExp($<)
rpl :a1 IdExp($x)
rpl :a2 Num(2)

rpl :t App(:f :a2)
rpl :f App(:f :a1)
rpl :f IdExp($=)
rpl :a1 IdExp($x)
rpl :a2 Num(0)

rpl :e App(:f :a)
rpl :f IdExp($_odd)
rpl :a App(:f :a2)
rpl :f App(:f :a1)
rpl :f IdExp($-)
rpl :a1 IdExp($x)
rpl :a2 Num(1)


-- _odd
rpl :_odd Lambda($y :body)
rpl :body If(:c :t :e)

rpl :c App(:f :a2)
rpl :f App(:f :a1)
rpl :f IdExp($<)
rpl :a1 IdExp($y)
rpl :a2 Num(2)

rpl :t App(:f :a2)
rpl :f App(:f :a1)
rpl :f IdExp($=)
rpl :a1 IdExp($y)
rpl :a2 Num(1)

rpl :e App(:f :a)
rpl :f IdExp($_even)
rpl :a App(:f :a2)
rpl :f App(:f :a1)
rpl :f IdExp($-)
rpl :a1 IdExp($y)
rpl :a2 Num(1)


-- root exp: even 7
rpl :rf IdExp($even)
rpl :ra Num(6)
